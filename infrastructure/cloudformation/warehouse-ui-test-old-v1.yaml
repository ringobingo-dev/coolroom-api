AWSTemplateFormatVersion: '2010-09-09'
Description: 'Warehouse UI Test Environment'

Parameters:
  Environment:
    Type: String
    Default: test
    AllowedValues:
      - test
      - staging
      - prod
    Description: Environment type for the deployment
  
  RateLimit:
    Type: Number
    Default: 2000
    Description: Number of requests allowed per 5-minute period per IP

  DomainName:
    Type: String
    Description: Domain name for the application
    Default: ''
  
  CertificateArn:
    Type: String
    Description: ACM certificate ARN for the domain
    Default: ''

Resources:
  # S3 Configuration
  TestBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'warehouse-ui-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 'warehouse-ui-logs/'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: warehouse-ui

  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # CloudFront Configuration
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access Identity for warehouse-ui-${Environment}'

  SecurityHeadersPolicy:
    Type: 'AWS::CloudFront::ResponseHeadersPolicy'
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub 'security-headers-${Environment}'
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            Override: true
            ContentSecurityPolicy: "default-src 'self'; img-src 'self' data:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
          StrictTransportSecurity:
            Override: true
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Preload: true
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: strict-origin-when-cross-origin
          ContentTypeOptions:
            Override: true
          FrameOptions:
            Override: true
            FrameOption: DENY

  # WAF Configuration
  WebACL:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      Name: !Sub '${Environment}-warehouse-ui-acl'
      Description: 'Web ACL for Warehouse UI'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${Environment}-WebACL'
      Rules:
        - Name: 'RateLimit'
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: !Ref RateLimit
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule

        - Name: 'BlockBadBots'
          Priority: 2
          Statement:
            OrStatement:
              Statements:
                - ByteMatchStatement:
                    SearchString: "bot"
                    FieldToMatch:
                      SingleHeader:
                        Name: "user-agent"
                    TextTransformations:
                      - Priority: 1
                        Type: LOWERCASE
                    PositionalConstraint: CONTAINS
                - ByteMatchStatement:
                    SearchString: "crawler"
                    FieldToMatch:
                      SingleHeader:
                        Name: "user-agent"
                    TextTransformations:
                      - Priority: 1
                        Type: LOWERCASE
                    PositionalConstraint: CONTAINS
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BlockBadBotsRule

        - Name: 'AWSManagedRulesCommonRuleSet'
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRulesCommonRuleSetMetric

  # CloudFront Distribution
  TestDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: 'index.html'
        WebACLId: !GetAtt WebACL.Arn
        Origins:
          - DomainName: !GetAtt TestBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
            OriginShield:
              Enabled: true
              OriginShieldRegion: us-east-1
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy
          Compress: true
          DefaultTTL: 86400
          MinTTL: 0
          MaxTTL: 31536000
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
        PriceClass: PriceClass_100
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: 'cloudfront-logs/'
          IncludeCookies: false

  # Bucket Policy
  BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TestBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${TestBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${TestDistribution}'

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, '']]
  IsProd: !Equals [!Ref Environment, 'prod']

Outputs:
  BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref TestBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'
  CloudFrontDomain:
    Description: 'CloudFront Domain Name'
    Value: !GetAtt TestDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-cloudfront-domain'
  CloudFrontId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref TestDistribution
    Export:
      Name: !Sub '${AWS::StackName}-cloudfront-id'