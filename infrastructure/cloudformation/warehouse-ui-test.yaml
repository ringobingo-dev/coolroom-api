AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Warehouse UI Test Environment'

Parameters:
  Environment:
    Type: String
    Default: test
    Description: Environment name
    AllowedValues:
      - test
      - staging
      - production

  RateLimit:
    Type: Number
    Default: 2000
    Description: Rate limit per IP address
    MinValue: 100
    MaxValue: 20000

  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name (optional)

  CertificateArn:
    Type: String
    Default: ''
    Description: SSL certificate ARN (required if domain name is provided)

Resources:
  # S3 Configuration
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Environment}-warehouse-ui-logs'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TestBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Environment}-warehouse-ui'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 's3-access-logs/'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # CloudFront Configuration
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Origin Access Identity for ${Environment} environment'

  SecurityHeadersPolicy:
    Type: 'AWS::CloudFront::ResponseHeadersPolicy'
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${Environment}-security-headers'
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            Override: true
            ContentSecurityPolicy: "default-src 'self'; img-src 'self' data:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';"
          StrictTransportSecurity:
            Override: true
            AccessControlMaxAgeSec: 31536000
            IncludeSubdomains: true
            Preload: true
          XSSProtection:
            Override: true
            Protection: true
            ModeBlock: true
          ReferrerPolicy:
            Override: true
            ReferrerPolicy: 'strict-origin-when-cross-origin'
          ContentTypeOptions:
            Override: true
          FrameOptions:
            Override: true
            FrameOption: 'DENY'

  # WAF Configuration
  WebACL:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      Name: !Sub '${Environment}-warehouse-ui-acl'
      Description: 'Web ACL for Warehouse UI'
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: !Sub '${Environment}-WebACL'
      Rules:
        - Name: 'RateLimit'
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: !Ref RateLimit
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule
        - Name: 'BlockBadBots'
          Priority: 2
          Statement:
            ByteMatchStatement:
              SearchString: 'bot'
              FieldToMatch:
                SingleHeader:
                  Name: 'user-agent'
              TextTransformations:
                - Priority: 1
                  Type: LOWERCASE
              PositionalConstraint: CONTAINS
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: BlockBadBotsRule
        - Name: 'AWS-AWSManagedRulesCommonRuleSet'
          Priority: 3
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: AWSManagedRules

  # CloudFront Distribution
  TestDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: 'index.html'
        WebACLId: !GetAtt WebACL.Arn
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt TestBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
          ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
        PriceClass: PriceClass_100
        Logging:
          Bucket: !GetAtt LoggingBucket.RegionalDomainName
          Prefix: 'cloudfront-logs/'
          IncludeCookies: false

  # Bucket Policy
  TestBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TestBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub '${TestBucket.Arn}/*'

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  IsProduction: !Equals [!Ref Environment, 'production']

Outputs:
  BucketName:
    Description: 'Name of the S3 bucket'
    Value: !Ref TestBucket
    Export:
      Name: !Sub '${AWS::StackName}-bucket-name'

  CloudFrontDomainName:
    Description: 'Domain name of the CloudFront distribution'
    Value: !GetAtt TestDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-cloudfront-domain'

  DistributionId:
    Description: 'ID of the CloudFront distribution'
    Value: !Ref TestDistribution
    Export:
      Name: !Sub '${AWS::StackName}-distribution-id'